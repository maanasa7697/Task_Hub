package com.example.task_manager;

import android.app.Activity;
import android.app.AlarmManager;
import android.app.DatePickerDialog;
import android.app.PendingIntent;
import android.app.TimePickerDialog;
import android.content.ContentValues;
import android.content.Context;
import android.content.Intent;
import android.content.pm.PackageManager;
import android.location.Address;
import android.location.Geocoder;
import android.net.Uri;
import android.os.Bundle;
import android.provider.MediaStore;
import android.util.Log;
import android.view.MenuItem;
import android.view.View;
import android.widget.Button;
import android.widget.DatePicker;
import android.widget.EditText;
import android.widget.ProgressBar;
import android.widget.SearchView;
import android.widget.TextView;
import android.widget.TimePicker;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.appcompat.app.ActionBar;
import androidx.appcompat.app.AppCompatActivity;
import androidx.core.app.ActivityCompat;
import androidx.core.content.ContextCompat;

import com.example.task_manager.model.TaskModel;
import com.google.android.gms.maps.CameraUpdateFactory;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.firebase.auth.FirebaseAuth;
import com.google.firebase.firestore.FirebaseFirestore;
import com.google.android.gms.maps.GoogleMap;
import com.google.android.gms.maps.OnMapReadyCallback;
import com.google.android.gms.maps.SupportMapFragment;
import com.google.android.gms.maps.model.LatLng;
import com.google.android.gms.maps.model.Marker;
import com.google.android.gms.maps.model.MarkerOptions;
import com.google.android.libraries.places.api.Places;

import org.jetbrains.annotations.NotNull;

import java.io.IOException;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

public class AddTaskActivity extends AppCompatActivity implements TimePickerDialog.OnTimeSetListener, OnMapReadyCallback {
    private GoogleMap mMap;
    private Marker taskMarker;
    private SearchView searchView;

    private static final int PERMISSION_REQUEST_CAMERA = 1;
    private static final int REQUEST_IMAGE_CAPTURE = 2;

    EditText etTaskInput;
    Button saveBtn, selectedDateTextView, selectedTimeTextView, capturePhotoBtn;
    TextView dayTextView, monthTextView, dateTextView;
    ProgressBar progressBar;
    FirebaseFirestore db;
    Calendar calendar;
    List<Uri> photoUris;
    Uri currentPhotoUri; // Temporary variable for the current photo URI

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_add_task);
        db = FirebaseFirestore.getInstance();


        selectedDateTextView = findViewById(R.id.selectedDateTextView);
        selectedTimeTextView = findViewById(R.id.selectedTimeTextView);
        dayTextView = findViewById(R.id.dayTextView);
        monthTextView = findViewById(R.id.monthTextView);
        dateTextView = findViewById(R.id.dateTextView);
        etTaskInput = findViewById(R.id.inputTaskName);
        saveBtn = findViewById(R.id.taskSave);
        capturePhotoBtn = findViewById(R.id.capturePhotoBtn);
        progressBar = findViewById(R.id.progress);
        searchView = findViewById(R.id.searchView);

        calendar = Calendar.getInstance();
        photoUris = new ArrayList<>();

        selectedDateTextView.setOnClickListener(v -> showDatePickerDialog());
        selectedTimeTextView.setOnClickListener(v -> showTimePickerDialog());
        capturePhotoBtn.setOnClickListener(v -> capturePhoto());

        saveBtn.setOnClickListener(v -> {
            String taskName = etTaskInput.getText().toString().trim();
            String day = dayTextView.getText().toString().trim();
            String month = monthTextView.getText().toString().trim();
            String date = dateTextView.getText().toString().trim();
            String time = selectedTimeTextView.getText().toString().trim();

            if (!taskName.isEmpty()) {
                List<String> photoUriStrings = new ArrayList<>();
                for (Uri uri : photoUris) {
                    photoUriStrings.add(uri.toString());
                }

                TaskModel taskModel = new TaskModel(
                        "", // TaskId (empty for now, will be generated by Firestore)
                        taskName,
                        "PENDING", // TaskStatus (assuming default status)
                        FirebaseAuth.getInstance().getUid(), // UserId
                        calendar.getTime(), // TaskDate
                        time, // TaskTime
                        date, // Date
                        day, // Day
                        month, // Month
                        calendar.get(Calendar.YEAR), // Year
                        new ArrayList<>(), // Attached file URIs (empty for now)
                        photoUriStrings // List of photo URIs
                );

                saveTaskToFirebase(taskModel);
            } else {
                Toast.makeText(AddTaskActivity.this, "Please enter a task name", Toast.LENGTH_SHORT).show();
            }
        });

        ActionBar actionBar = getSupportActionBar();
        if (actionBar != null) {
            actionBar.setTitle("Add Task");
            actionBar.setDisplayHomeAsUpEnabled(true);
        }

        // Create notification channel
        createNotificationChannel();



        searchView.setOnQueryTextListener(new SearchView.OnQueryTextListener() {
            @Override
            public boolean onQueryTextSubmit(String query) {
                searchLocation(query);
                return false;
            }

            @Override
            public boolean onQueryTextChange(String newText) {
                return false;
            }
        });

        // Initialize Places
        if (!Places.isInitialized()) {
            Places.initialize(getApplicationContext(), "YOUR_API_KEY");
        }

        // Initialize the map
        SupportMapFragment mapFragment = (SupportMapFragment) getSupportFragmentManager()
                .findFragmentById(R.id.map);
        mapFragment.getMapAsync(this);
    }

    @Override
    public void onMapReady(GoogleMap googleMap) {
        mMap = googleMap;

        // Set a map click listener
        mMap.setOnMapClickListener(latLng -> {
            if (taskMarker != null) {
                taskMarker.remove();
            }
            taskMarker = mMap.addMarker(new MarkerOptions().position(latLng).title("Task Location"));
        });
    }

    private void searchLocation(String location) {
        List<Address> addressList = null;
        if (location != null || !location.equals("")) {
            Geocoder geocoder = new Geocoder(this);
            try {
                addressList = geocoder.getFromLocationName(location, 1);
            } catch (IOException e) {
                e.printStackTrace();
            }
            if (addressList != null && !addressList.isEmpty()) {
                Address address = addressList.get(0);
                LatLng latLng = new LatLng(address.getLatitude(), address.getLongitude());
                mMap.animateCamera(CameraUpdateFactory.newLatLngZoom(latLng, 15));
                if (taskMarker != null) {
                    taskMarker.remove();
                }
                taskMarker = mMap.addMarker(new MarkerOptions().position(latLng).title("Task Location"));
            } else {
                Toast.makeText(this, "Location not found", Toast.LENGTH_SHORT).show();
            }
        }
    }
    

    private void showDatePickerDialog() {
        DatePickerDialog datePickerDialog = new DatePickerDialog(this, (view, year, month, dayOfMonth) -> {
            calendar.set(Calendar.YEAR, year);
            calendar.set(Calendar.MONTH, month);
            calendar.set(Calendar.DAY_OF_MONTH, dayOfMonth);

            selectedDateTextView.setText(DateFormat.getDateInstance().format(calendar.getTime()));
            dayTextView.setText(String.format("%1$tA", calendar));
            monthTextView.setText(String.format("%1$tb", calendar));
            dateTextView.setText(String.format("%1$td", calendar));

        }, calendar.get(Calendar.YEAR), calendar.get(Calendar.MONTH), calendar.get(Calendar.DAY_OF_MONTH));

        datePickerDialog.show();
    }

    private void showTimePickerDialog() {
        TimePickerDialog timePickerDialog = new TimePickerDialog(this, this,
                calendar.get(Calendar.HOUR_OF_DAY),
                calendar.get(Calendar.MINUTE),
                true);

        timePickerDialog.show();
    }

    @Override
    public void onTimeSet(TimePicker view, int hourOfDay, int minute) {
        calendar.set(Calendar.HOUR_OF_DAY, hourOfDay);
        calendar.set(Calendar.MINUTE, minute);

        selectedTimeTextView.setText(String.format("%02d:%02d", hourOfDay, minute));
    }

    private void capturePhoto() {
        if (ContextCompat.checkSelfPermission(this, android.Manifest.permission.CAMERA) != PackageManager.PERMISSION_GRANTED) {
            ActivityCompat.requestPermissions(this, new String[]{android.Manifest.permission.CAMERA}, PERMISSION_REQUEST_CAMERA);
        } else {
            dispatchTakePictureIntent();
        }
    }

    private void dispatchTakePictureIntent() {
        Intent takePictureIntent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
        if (takePictureIntent.resolveActivity(getPackageManager()) != null) {
            ContentValues values = new ContentValues();
            values.put(MediaStore.Images.Media.TITLE, "New Picture");
            values.put(MediaStore.Images.Media.DESCRIPTION, "From your Camera");
            currentPhotoUri = getContentResolver().insert(MediaStore.Images.Media.EXTERNAL_CONTENT_URI, values);
            takePictureIntent.putExtra(MediaStore.EXTRA_OUTPUT, currentPhotoUri);
            startActivityForResult(takePictureIntent, REQUEST_IMAGE_CAPTURE);
        }
    }

    @Override
    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) {
        super.onActivityResult(requestCode, resultCode, data);

        if (requestCode == REQUEST_IMAGE_CAPTURE && resultCode == RESULT_OK) {
            if (currentPhotoUri != null) {
                photoUris.add(currentPhotoUri);
                Toast.makeText(this, "Photo captured successfully", Toast.LENGTH_SHORT).show();
            }
        }
    }

    private void saveTaskToFirebase(TaskModel taskModel) {
        progressBar.setVisibility(View.VISIBLE);

        db.collection("tasks").add(taskModel)
                .addOnSuccessListener(documentReference -> {
                    taskModel.setTaskId(documentReference.getId());
                    Intent resultIntent = new Intent();
                    resultIntent.putExtra("newTask", taskModel);
                    setResult(Activity.RESULT_OK, resultIntent);
                    progressBar.setVisibility(View.GONE);

                    // Schedule notification 1 minute before the task time
                    scheduleNotification(taskModel);

                    finish();
                })
                .addOnFailureListener(e -> {
                    Toast.makeText(AddTaskActivity.this, "Failed to add task", Toast.LENGTH_SHORT).show();
                    progressBar.setVisibility(View.GONE);
                    Log.e("AddTaskActivity", "Error adding task", e);
                });
    }

    private void scheduleNotification(TaskModel taskModel) {
        AlarmManager alarmManager = (AlarmManager) getSystemService(Context.ALARM_SERVICE);
        Intent intent = new Intent(this, NotificationReceiver.class);
        intent.putExtra("taskName", taskModel.getTaskName());
        PendingIntent pendingIntent = PendingIntent.getBroadcast(this, taskModel.getTaskId().hashCode(), intent, PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_IMMUTABLE);

        Calendar notificationTime = Calendar.getInstance();
        notificationTime.setTime(taskModel.getTaskDate()); // Set the task time
        notificationTime.add(Calendar.MINUTE, -1); // Schedule notification 1 minute before task time

        alarmManager.setExact(AlarmManager.RTC_WAKEUP, notificationTime.getTimeInMillis(), pendingIntent);
    }

    private void createNotificationChannel() {
        if (android.os.Build.VERSION.SDK_INT >= android.os.Build.VERSION_CODES.O) {
            CharSequence name = "Task Manager Channel";
            String description = "Channel for Task Manager notifications";
            int importance = android.app.NotificationManager.IMPORTANCE_DEFAULT;
            android.app.NotificationChannel channel = new android.app.NotificationChannel("task_manager_channel", name, importance);
            channel.setDescription(description);
            android.app.NotificationManager notificationManager = getSystemService(android.app.NotificationManager.class);
            notificationManager.createNotificationChannel(channel);
        }
    }

    @Override
    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) {
        super.onRequestPermissionsResult(requestCode, permissions, grantResults);
        if (requestCode == PERMISSION_REQUEST_CAMERA) {
            if (grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
                dispatchTakePictureIntent();
            } else {
                Toast.makeText(this, "Camera permission denied", Toast.LENGTH_SHORT).show();
            }
        }
    }

    @Override
    public boolean onOptionsItemSelected(@NonNull MenuItem item) {
        if (item.getItemId() == android.R.id.home) {
            finish();
            return true;
        }
        return super.onOptionsItemSelected(item);
    }
}

